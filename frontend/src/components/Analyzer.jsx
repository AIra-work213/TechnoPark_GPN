import React, { useEffect, useMemo, useState } from 'react';
import FileUpload from './FileUpload';
import CryptoJS from "crypto-js";

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';

function Analyzer() {
  const [coreDocument, setCoreDocument] = useState(null);
  const [supportingDocuments, setSupportingDocuments] = useState([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [statusMessage, setStatusMessage] = useState('');
  const [jobId, setJobId] = useState(null);
  const [analysisResult, setAnalysisResult] = useState(null);

  const hasFilesForAnalysis = useMemo(
    () => Boolean(coreDocument?.file) || supportingDocuments.length > 0,
    [coreDocument, supportingDocuments]
  );

  const buildDocumentPayload = (entry, isRoot) => {
    const { file, text } = entry;
    return {
      id: CryptoJS.SHA256(`${file.name}-${file.size}-${file.lastModified}-${isRoot}`).toString(CryptoJS.enc.Hex),
      doc_name: file.name,
      summary: "",
      extrainfo: "",
      text: text || "",
      is_root: isRoot,
      is_visited: false,
    };
  };

  const handleCoreFileChange = (entry) => {
    if (!entry || !entry.file) {
      setCoreDocument(null);
      return;
    }
    setCoreDocument(entry);
    console.log("–ó–∞–≥—Ä—É–∂–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª:", entry.file.name);
  };

  const handleAdditionalFilesChange = (entries) => {
    const list = entries || [];
    setSupportingDocuments(list);
    console.log("–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:", list.map((item) => item.file.name));
  };

  const handleSubmit = async (event) => {
    event.preventDefault();

    if (!coreDocument?.file) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª.");
      return;
    }

    setErrorMessage('');
    setStatusMessage('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑...');
    setAnalysisResult(null);
    setIsSubmitting(true);

    const payload = [
      buildDocumentPayload(coreDocument, true),
      ...supportingDocuments.map((entry) => buildDocumentPayload(entry, false)),
    ];

    try {
      const response = await fetch(`${API_BASE_URL}/api/takeDocs`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ documents: payload }),
      });

      if (!response.ok) {
        throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`);
      }

      const data = await response.json();
      if (!data?.jobId) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏');
      }

      setJobId(data.jobId);
      setStatusMessage('–î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤:', error);
      setErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      setIsSubmitting(false);
      setStatusMessage('');
    }
  };

  useEffect(() => {
    if (!jobId) {
      return undefined;
    }

    let isCancelled = false;

    const pollIntervalMs = 4000;

    const fetchStatus = async () => {
      try {
        const response = await fetch(`${API_BASE_URL}/api/takeDocs/${jobId}`);
        if (!response.ok) {
          throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`);
        }

        const data = await response.json();

        if (isCancelled) {
          return;
        }

        if (data.status === 'completed') {
          setAnalysisResult(data.result);
          setStatusMessage('–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
          setIsSubmitting(false);
          setJobId(null);
        } else if (data.status === 'error') {
          setErrorMessage(data.error || '–í–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
          setStatusMessage('–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π');
          setIsSubmitting(false);
          setJobId(null);
        } else {
          const statusText = data.status === 'processing'
            ? '–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...'
            : '–ó–∞–¥–∞—á–∞ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏...';
          setStatusMessage(statusText);
        }
      } catch (error) {
        if (!isCancelled) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', error);
          setErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          setIsSubmitting(false);
          setJobId(null);
          setStatusMessage('');
        }
      }
    };

    const intervalId = setInterval(fetchStatus, pollIntervalMs);
    fetchStatus();

    return () => {
      isCancelled = true;
      clearInterval(intervalId);
    };
  }, [jobId]);

  return (
    <div className="analyzer-container">
      <div className="left-panel">
        <h3>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞</h3>
        <p className="description">–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ò–ò</p>

        <div className="upload-section">
          <h4>–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞</h4>
          <FileUpload
            label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å—é–¥–∞ –≤–∞—à –∫–æ—Ä–Ω–µ–≤–æ–π —Ñ–∞–π–ª"
            onChange={handleCoreFileChange}
            accept=".pdf,.docx,.txt"
          />
          <FileUpload
            label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å—é–¥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã"
            onChange={handleAdditionalFilesChange}
            multiple={true}
            accept=".pdf,.docx,.txt,.jpg,.png"
          />
        </div>

        <button
          className={`analyze-button ${hasFilesForAnalysis ? 'loaded' : ''}`}
          onClick={handleSubmit}
          disabled={isSubmitting}
        >
          <span className="icon">ü§ñ</span> {isSubmitting ? '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...' : '–ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é –ò–ò'}
        </button>

        {errorMessage && <p className="error-message">{errorMessage}</p>}
      </div>

      <div className="right-panel">
        <div className="ready-state">
          <div className="icon-circle">
            <span className="loading-icon">‚öôÔ∏è</span>
          </div>
          <h4>–ì–æ—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å</h4>
          <p>
            –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é –ò–ò¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
          </p>
          {jobId && <p className="status-message">ID –∑–∞–¥–∞—á–∏: {jobId}</p>}
          {statusMessage && <p className="status-message">{statusMessage}</p>}
          {analysisResult && (
            <div className="analysis-result">
              <h5>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞</h5>
              <pre>{JSON.stringify(analysisResult, null, 2)}</pre>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default Analyzer;