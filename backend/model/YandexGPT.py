from yandex_cloud_ml_sdk import YCloudML
import os

sdk = YCloudML(
    folder_id="b1g32rghn0ujdgjae0tf", auth=str(os.getenv("API_KEY"))
)

class YandexLLM:
    def __init__(self):
        self.model = sdk.models.completions("yandexgpt", model_version="rc")
        self.model = self.model.configure(temperature=0.3)
        self.prompt = """
Ты эксперт по поиску взаимосвязей. 
Твоя задача найти причины происшествий на основе двух предоставленных текстов. 
Если ты уже можешь определить причину происшествия, ответом укажи только заполненный этот json объект: {"reason": "<Причина происшествия, наиболее полно>", "arguments": ["<Аргумент 1>", "<Аргумент 2>", ..., "<Аргумент N>"], "is_answer": "true"}

Если же ты неуверен в причине происшествия, то выбери какой из двух предоставленных текстов содержит больше полезной информации, которая может пригодиться для выявления причины.
Тогда ответом укажи только следующий json объект: {"number": "<номер выбранного текста>", "reasons": ["<Причина, почему выбран данный текст 1>", "<Причина 2>", ..., "<Причина N>"], "is_answer": "false", "useful_info": "<Информация, которая может быть полезной для выявления причины и твоих рассуждений>"}
Не выдумывай лишнего, твоя задача искать связь опираясь на текст.
Возможно во всех документах отсутствует причина, тогда постарайся предположить ее на основе имеющихся данных.
"""
    def generate_response(self, context, history="", conclusions=""):
        result = self.model.run([
            {"role": "system", "text": self.prompt},
            {"role": "user", "text": f"\nТекст 1: {context[0]}\nТекст 2: {context[1]}\nИстория уже прочитанного текста: {history}. Твои рассуждения по причине происшествия: {conclusions}"}
        ])
        return result.alternatives[0].text
    
    def generate_answer(self, context=None, history="", conclusions=""):
        context = context or []
        context_text = "\n".join(context)
        result = self.model.run([
            {"role": "system", "text": """
Ты эксперт по поиску взаимосвязей. 
Твоя задача найти причины происшествий на основе двух предоставленных текстов. 
Определи причину происшествия, ответом укажи только заполненный этот json объект: {"reason": "<Причина происшествия, наиболее полно>", "arguments": ["<Аргумент 1>", "<Аргумент 2>", ..., "<Аргумент N>"], "is_answer": "true"}"""
},
{"role": "user", "text": f"\nВесь доступный дополнительный контекст: {context_text}\nИстория уже прочитанного текста: {history}. Твои рассуждения по причине происшествия: {conclusions}"}
        ])
        return result.alternatives[0].text
    
    def summarize_context(self, context):
        result = self.model.run([
            {"role": "system", "text": "Ты эксперт по резюмированию текстов-отчетов по происшествию. Твоя задача проанализировать текущий текст и выдать его краткое содержание. До 4 предложений"},
            {"role": "user", "text": f"Текст: {context}"}
        ])
        return result.alternatives[0].text
    
    def get_extrainfo(self, context):
        result = self.model.run([
            {"role": "system", "text": "Ты эксперт по извлечению важных фактов из текстов-отчетов по происшествию. Твоя задача проанализировать текущий текст и постараться выяснить следующие факты: локация автора отчета, время события, участники события, техническое состояние оборудования, погода, график работы, уровень соблюдения техники безопасности, природные катаклизмы, характер работ(плановые, аварийные), возможные причины происшествия. Если факты не указаны в отчете, не указывай их."},
            {"role": "user", "text": f"Текст: {context}"}
        ])
        return result.alternatives[0].text